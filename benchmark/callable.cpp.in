#if BENCHMARK == 2
#include <functional>
#elif BENCHMARK == 3 || BENCHMARK == 4
#include <eggs/invoke.hpp>
#endif

#include <utility>

template <int I>
static int fun(...) { return I; }

template <int I>
struct callable {
    template <typename ...Args>
    auto operator()(Args&&... args) const
        noexcept(noexcept(fun<I>(std::forward<Args>(args)...)))
     -> decltype(fun<I>(std::forward<Args>(args)...))
    {
        return fun<I>(std::forward<Args>(args)...);
    }
};

template <int I>
static void benchmark()
{
#if BENCHMARK == 1
    callable<I>{}(0, 1, 2);
#elif BENCHMARK == 2
    std::invoke(callable<I>{}, 0, 1, 2);
#elif BENCHMARK == 3
    eggs::invoke(callable<I>{}, 0, 1, 2);
#elif BENCHMARK == 4
    EGGS_INVOKE(callable<I>{}, 0, 1, 2);
#endif
}

@BENCHMARK_INSTANTIATIONS@
